{"version":3,"sources":["tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontsize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","MovieRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6faeeeba.chunk.js","sourcesContent":["\r\n\r\nconst API_KEY = 'ab43306b48ce1d7e4c112545959f6496';\r\nconst API_BASE ='https://api.themoviedb.org/3';\r\n\r\n\r\n/*\r\n\r\n*******************************************\r\n*                                         *\r\n* lista de informações obtidas pela a API *\r\n*                                         *\r\n*******************************************\r\n- originais netflix\r\n- recomendados\r\n- ação\r\n- comédia\r\n- terror\r\n -romance\r\n- documentários\r\n- mais vistos\r\n\r\n*/\r\n\r\n    const basicFetch = async (endpoint) =>{\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\n\r\n\r\n\r\nexport default{\r\n    getHomeList: async () =>{\r\n        return [\r\n              {  \r\n                   slug: 'originals',\r\n                   title: 'Originais da Netflix',\r\n                   items: await basicFetch(`/discover/tv?with_network=213&language=pt-PT&api_key=${API_KEY}`)\r\n\r\n                },\r\n\r\n                {\r\n                 \r\n                    slug: 'trending',\r\n                    title: 'Recomendados para ti',\r\n                    items: await basicFetch(`/trending/all/week?language=pt-PT&api_key=${API_KEY}`)\r\n\r\n                 },\r\n\r\n                 {\r\n                 \r\n                    slug: 'toprated',\r\n                    title: 'Mais Vistos',\r\n                    items: await basicFetch(`/movie/top_rated?language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                   },\r\n\r\n                   {\r\n                 \r\n                    slug: 'action',\r\n                    title: 'Ação',\r\n                    items: await basicFetch(`/discover/movie?with_genres=28&language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                    \r\n                   },\r\n\r\n                   {\r\n                 \r\n                    slug: 'comedy',\r\n                    title: 'Comédia',\r\n                    items: await basicFetch(`/discover/movie?with_genres=35&language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                   },\r\n\r\n                   {\r\n                 \r\n                    slug: 'horror',\r\n                    title: 'Terror',\r\n                    items: await basicFetch(`/discover/movie?with_genres=27&language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                   },\r\n\r\n                   {\r\n                 \r\n                    slug: 'romance',\r\n                    title: 'Romance',\r\n                    items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                   },\r\n\r\n                   {\r\n                 \r\n                    slug: 'documentary',\r\n                    title: 'Documentários',\r\n                    items: await basicFetch(`/discover/movie?with_genres=99&language=pt-PT&api_key=${API_KEY}`)\r\n   \r\n                   },\r\n\r\n        ];\r\n\r\n    },\r\n\r\n     getMovieInfo: async (movieId, type) =>{\r\n\r\n    let info = {};\r\n\r\n    if (movieId){\r\n        switch(type){\r\n\r\n            case 'movie':\r\n                  info = await basicFetch(`/movie/${movieId}?language=pt-PT&api_key=${API_KEY}`);\r\n            break;\r\n\r\n            case 'tv':\r\n                info = await basicFetch(`/tv/${movieId}?language=pt-PT&api_key=${API_KEY}`);\r\n            break;\r\n            default:\r\n                info = null;\r\n                break\r\n          }\r\n\r\n\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n}","import React, {useState} from 'react';\r\nimport './Movie.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n\r\nexport default ({title, items}) => {\r\n\r\n  const [scrollX, setScrollX] = useState(-400);\r\n        \r\n  const handleLeftArrow = () =>{\r\n\r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if(x > 0){\r\n      x = 0;\r\n    }\r\n     setScrollX(x);\r\n  }\r\n\r\n  const handleRightArrow = () =>{\r\n\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listW = items.results.length * 150;\r\n\r\n    if((window.innerWidth - listW) > x){\r\n      x = (window.innerWidth - listW) - 60;\r\n    }\r\n\r\n    setScrollX(x);\r\n\r\n  }\r\n      \r\n    return (\r\n\r\n      <div className=\"movieRow\">\r\n        <h2>{title}</h2>\r\n        <div className=\"navigation--left\" onClick={handleLeftArrow}>\r\n          <NavigateBeforeIcon style={{fontsize: 50}} />\r\n        </div>\r\n\r\n        <div className=\"navigation--right\" onClick={handleRightArrow}>\r\n          <NavigateNextIcon style={{fontsize: 50}} />\r\n         </div>\r\n\r\n        <div className=\"movieRow--listarea\">\r\n\r\n          <div className=\"movieRow--list\" style={{\r\n            marginLeft: scrollX,\r\n            width:items.results.length * 150\r\n          }}>\r\n          {items.results.length > 0 && items.results.map((item, key) =>(\r\n          \r\n          <div key={key} className=\"movieRow--item\">\r\n              <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n          </div>\r\n      ))}\r\n\r\n\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './FeaturedMovie.css'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default ({item}) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for(let i in item.genres){\r\n        genres.push( item.genres[i].name);\r\n    }\r\n\r\n\r\n    return (\r\n      \r\n        <section className=\"featured\" style={{\r\n\r\n            backgroundSize:'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n\r\n\r\n\r\n\r\n        }}>\r\n\r\n            <div className=\"featured--vertical\">\r\n               <div className=\"featured--horizontal\">\r\n                 <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                       <div className=\"featured--points\">{item.vote_average}</div>\r\n                          <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                          <div className=\"featured--season\">{item.number_of_seasons} Temporada{item.number_of_seasons !=1 ?'s' : ''}</div>\r\n                          </div>\r\n                          <div className=\"featured--description\">{item.overview}</div>\r\n                        <div className=\"featured--buttons\">\r\n                           <a href={`/watch/${item.id}`} className=\"button--left\"> <PlayArrowIcon className=\"playarrow\" />Assistir</a>\r\n                           <a href={`/list/add${item.id}`} className=\"button--right\"><AddIcon className=\"playarrow\" /> Minha Lista</a>\r\n                       \r\n                    </div>\r\n\r\n                    <div className=\"featured--genres\">\r\n                        <strong>Gêneros:</strong> {genres.join(', ')}\r\n\r\n                    </div>\r\n            \r\n               </div>\r\n            </div>\r\n        </section>\r\n        \r\n    );\r\n\r\n\r\n}","import react from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) =>{\r\n    return(\r\n\r\n\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1280px-Netflix_2015_logo.svg.png\" alt=\"Netflix-Logo\"></img>\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"header--usuario\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/user-log-in-or-signup-988719.png\" alt=\"Usuário\"></img>\r\n                </a>\r\n            </div>\r\n        </header>\r\n\r\n    );\r\n}","import react, { useEffect, useState} from 'react';\nimport './App.css';\nimport tmdb from './tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect (() => {\n\n   const loadAll = async () =>{\n\n    //Chamar a Lista Total\n\n    let list = await tmdb.getHomeList();\n     setMovieList(list);\n  \n\n   //Chamar o Featured Aliatoriamente\n\n   let originals = list.filter(i=>i.slug === 'originals');\n   let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length -1));\n   let chosen = originals[0].items.results[randomChosen];\n   let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv');\n   setFeaturedData(chosenInfo);\n   \n  }\n  \n  \n  loadAll();\n}, []);\n\nuseEffect(()=>{\n        \n  const scrollListener = () =>{\n    \n      if(window.scrollY > 20){\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n      \n    }\n      window.addEventListener('scroll', scrollListener);\n\n    return () =>{\n\n      window.removeEventListener('scroll', scrollListener);\n    }\n}, []);\n\n\n\n return(\n   <div className=\"page\">\n\n     <Header black={blackHeader} />\n\n    {featuredData &&\n\n      <FeaturedMovie item={featuredData} />\n    \n    }\n\n\n\n     <section className=\"list\">\n       {movieList.map((item, key)=>(\n       \n       <MovieRow key={key} title={item.title} items={item.items}/>\n\n       ))}\n     </section>\n\n     <footer>\n           Website Construído Apenas Com O Objetivo de Aprendizagem Em Programação  React JS\n     </footer>\n         \n         {movieList.length <= 0 && \n     <div className=\"loading\">\n       <img src=\"https://i.pinimg.com/originals/9a/02/aa/9a02aac51ed499e01518ac73dd954eb1.gif\" alt=\"Caregando\"></img>\n     </div>\n       }\n       \n   </div>\n );\n\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}